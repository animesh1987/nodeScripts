{"version":3,"sources":["excelTransformertoSQL.js"],"names":[],"mappings":"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","file":"excelTransformertoSQL-compiled.js","sourcesContent":["const fs = require('fs');\nconst path = require('path');\nconst XLSX = require('xlsx');\nconst _ = require('underscore');\nconst async = require('async');\nconst database = 'Grocery';\nconst mssql = require('mssql');\nconst uuid = require('node-uuid');\nconst filePath = path.join(__dirname, '../', 'data/products_1.xlsx');\nvar config = {\n    user: 'sa',\n    server: 'localhost',\n    password: 'Hb1400f?',\n    database: database,\n    parseJSON: true\n};\n\nvar result = [];\n\nmssql.connect(config, (err) => {\n    if(err) {\n        console.log(err);\n        return;\n    }\n\n    let startTime = new Date();\n\n    console.log('Reading workbook: ', startTime);\n    var workbook = XLSX.readFile(filePath);\n    let end = new Date();\n    console.log('Workbook processed', (end.getTime() - startTime.getTime())/(60*1000));\n\n    const sheetName = workbook.SheetNames[0];\n    const first_worksheet = workbook.Sheets[sheetName];\n\n    console.log('Going to parse to JSON');\n\n    let data = XLSX.utils.sheet_to_json(first_worksheet, {header: 1});\n    console.log('Parsed to JSON');\n    console.log('going to end');\n    const headers = data[0];\n    headers.splice(0,1);\n    let columns = \"(\";\n    _.each(headers, (h)=>{\n        columns = columns + ` [${h}],`\n    });\n    columns = columns.substring(columns.length - 1, 0 );\n    columns = `${columns} )`\n\n    let queryArr = [];\n    let request = new mssql.Request();\n\n    data.splice(0,1);\n    _.each(data, (row)=>{\n        let rowString = \"(\";\n\n        if(row.length > 0){\n            row.splice(0,1);\n            _.each(row, (d, i)=>{\n                rowString = rowString + ` \"${d}\",`\n            });\n            rowString = rowString.substring(rowString.length - 1, 0 );\n            rowString = `${rowString} )`;\n            queryArr.push(\n                (callback)=>{\n                   request.query(`insert into Products ${columns} values ${rowString}`, (err, res)=>{\n                       if(err) {\n                           console.log(`insert into Products ${columns} values ${rowString}`);\n                           callback(err);\n                       }\n\n                       callback(null, res);\n                   })\n                }\n            )\n\n        }\n    });\n\n    console.log('Processed :', (new Date() - startTime)/(1000 * 60));\n\n    async.parallelLimit(queryArr, 1000, (err, results)=>{\n        if (err){console.log(err); return;}\n\n        console.log(results);\n        console.log('Inserted :', (new Date() - startTime) / (1000 * 60));\n        process.exit();\n    })\n});\n/*\n\nvar workbook = XLSX.readFile(filePath);\nconsole.log('Workbook processed');\n\nconst sheetName = workbook.SheetNames[1];\nconst first_worksheet = workbook.Sheets[sheetName];\n\nconsole.log('Going to parse to JSON');\n\nconst data = XLSX.utils.sheet_to_json(first_worksheet, {header: 1})\n\nconsole.log('Parsed to JSON');\n\nconsole.log('going to end');\n\nconst headers = data[0];\n\ndata.splice(0, 1);\n\n_.each(data, (row)=>{\n    let rowObject = {};\n    _.each(row, (d, i)=>{\n        rowObject[headers[i]] = d[i];\n        console.log(rowObject)\n    });\n});\n\n\nprocess.exit();\n uuid1 = uuid.v1();\n*/\n\n"]}